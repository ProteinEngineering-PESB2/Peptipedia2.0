FROM python:3.10-slim as base

ARG DEBIAN_FRONTEND=noninteractive
ARG BLAST_VERSION=2.13.0
ARG HMMER_VERSION=3.3.2
ARG BUILD_CPUS=4


FROM base as compile

ARG DEBIAN_FRONTEND
ARG BLAST_VERSION
ARG HMMER_VERSION
ARG BUILD_CPUS

RUN apt-get update && \
	apt-get install --no-install-recommends -y \
	wget build-essential procps

WORKDIR /work

# Descarga y compilación de BLAST
RUN wget https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/${BLAST_VERSION}/ncbi-blast-${BLAST_VERSION}+-src.tar.gz
RUN tar -xzf ncbi-blast-${BLAST_VERSION}+-src.tar.gz
RUN cd ncbi-blast-${BLAST_VERSION}+-src/c++ && ./configure && make -j ${BUILD_CPUS}

# Descarga y compilación de HMMER
RUN wget http://eddylab.org/software/hmmer/hmmer-${HMMER_VERSION}.tar.gz
RUN tar -xzf hmmer-${HMMER_VERSION}.tar.gz
RUN cd hmmer-${HMMER_VERSION} && ./configure && make -j ${BUILD_CPUS}

# Descarga y descompresión de PfamScan
RUN wget -T 10 http://ftp.ebi.ac.uk/pub/databases/Pfam/Tools/PfamScan.tar.gz
RUN tar -xzf PfamScan.tar.gz


FROM base as build

ARG DEBIAN_FRONTEND
ARG BLAST_VERSION
ARG HMMER_VERSION

RUN apt-get update && \
	apt-get install --no-install-recommends -y \
	git curl build-essential cpio

COPY --from=compile /work /work
WORKDIR /work

# Instalación de BLAST
RUN make -C ncbi-blast-${BLAST_VERSION}+-src/c++ install

# Instalación de Hmmer
RUN make -C hmmer-${HMMER_VERSION} install
RUN make -C hmmer-${HMMER_VERSION}/easel install

# Instalación de PfamScan
RUN cp -r PfamScan /usr/local/share
# Seteo de permisos y creación de enlace simbólico a /usr/local/
WORKDIR /usr/local/share/PfamScan
RUN find . -type f -exec chmod 644 {} + && \
	find . -type d -exec chmod 755 {} + && \
	chmod +x pfam_scan.pl && \
	ln -s /usr/local/share/PfamScan/pfam_scan.pl /usr/local/bin/

# Instalación de Predict_Property
RUN git clone https://github.com/realbigws/Predict_Property /usr/local/share/Predict_Property

# Instalación de dependencias de Perl
RUN cpan Moose && \
	cpan bioperl-1.4 && \
	cpan IPC:Run

# Instalación de dependencias de Python
RUN curl -sSL https://install.python-poetry.org | python3 -
COPY pyproject.toml poetry.lock /src/
WORKDIR /src
RUN /root/.local/bin/poetry export --without-hashes --no-interaction --no-ansi -f requirements.txt -o requirements.txt
RUN pip install -r requirements.txt


FROM base as run

ARG DEBIAN_FRONTEND
ENV PYTHONUNBUFFERED=1

# Actualización de paquetes
RUN apt-get update && apt-get upgrade -y

# Instalación de programas y librerías necesarias
RUN apt-get install -y --no-install-recommends \
	zip pp-popularity-contest \
	libpath-tiny-perl \
	metastudent clustalo && \
	rm -rf /var/lib/apt/lists/*

COPY --from=build /usr/local/ /usr/local/

COPY install_requisites/databases /data/pfam
WORKDIR /data/pfam
RUN hmmpress Pfam-A.hmm
COPY install_requisites/blastdb /data/blastdb
COPY install_requisites/activity_models /data/activity_models

# Variables de entorno
ENV BLASTDB="/data/blastdb" \
	PFAM_DB="/data/pfam" \
	PERL5LIB="/usr/local/share/PfamScan:${PERL5LIB}" \
	PATH="/usr/local/share/Predict_Property:${PATH}"

COPY ./peptipedia /app/peptipedia
COPY ./conf/gunicorn.conf.py /app/
WORKDIR /app

# Ejecución de la api
CMD ["sh","-c", "gunicorn peptipedia.wsgi:app -c gunicorn.conf.py"]
